from typing import Union,Optional,NoReturn,TypeVar
from log import Log
from model import Book, Chapter, ChapterList


def req(
    url: tuple[str,list[str]],
    caller: str,
    logger: Optional[Log],
    level: Optional[int],
    exit: Optional[bool],
    wait: Optional[bool]
) -> Union[dict, None]: ...

X=TypeVar("X")
class Stack:
    def __init__(self): ...
    def push(self, x: X) -> NoReturn: ...
    def top(self) -> X: ...
    def pop(self) -> X: ...
    def length(self) -> int: ...
    def empty(self) -> bool: ...


class ToApp:
    logger: Log
    ip: str

    def __init__(self): ...
    def get_shelf(self) -> list[Book]: ...
    def choose_book(self, books: list[Book]) -> tuple[int, int, Book]: ...
    def get_charpter_list(self, book: Book) -> Union[list[ChapterList],NoReturn]: ...
    def download_content(
        self, chapters: list[ChapterList]) -> tuple[list[Chapter], list[ChapterList]]: ...

    def _testIP(self, ip: str) -> bool: ...


class Trans:
    def __init__(self, type: Optional[int]): ...
    def content_basic(self, chap: Chapter) -> list[str]: ...
    def title(self, chap: Chapter) -> str: ...
    def __call__(self, chap: Chapter) -> list[Chapter]: ...


class ToServer:
    def __init__(self, optDir: str): ...
    def createdir(self) -> NoReturn: ...
    def asyncDownload(self, chapters: list[Chapter]) -> list[Chapter]: ...

def merge(chapters:list[Chapter],merge:Optional[bool]) -> NoReturn:...