from _typeshed import Incomplete
from html import escape as escape
from log import Log as Log
from model import Book, Chapter, ChapterList
from typing import Optional

def req(param, caller: str = ..., logger: Incomplete | None = ..., level: int = ..., exit: bool = ..., wait: bool = ...): ...
def chk(num: int): ...

class Stack:
    def __init__(self) -> None: ...
    def push(self, t) -> None: ...
    def pop(self): ...
    def length(self) -> int: ...
    def empty(self): ...
    def clear(self) -> None: ...
    def __len__(self) -> int: ...

class Queue:
    def __init__(self) -> None: ...
    def push(self, t) -> None: ...
    def pop(self): ...
    def length(self) -> int: ...
    def empty(self): ...
    def clear(self) -> None: ...
    def __len__(self) -> int: ...

class ToApp:
    logger: Incomplete
    def __init__(self) -> None: ...
    def init(self) -> None: ...
    def get_shelf(self): ...
    def choose_book(self, books: list[Book]): ...
    def choose_area(self, book: Book): ...
    def choose_single(self): ...
    def get_charpter_list(self, book: Book): ...
    def download_content(self, chapters: list[ChapterList]): ...
    ip: Incomplete
    def getIP(self) -> None: ...
    def saveIP(self) -> None: ...

class Trans:
    open_bracket: str
    close_bracket: str
    type: Incomplete
    area: Incomplete
    def __init__(self, type: Optional[int] = ...) -> None: ...
    def trans(self, chap: Chapter): ...
    def char(self, con: str) -> str: ...
    def title(self, chap: Chapter): ...
    def __call__(self, chap: Chapter) -> list[Chapter]: ...

class ToServer:
    logger: Incomplete
    optDir: Incomplete
    finished: Incomplete
    ups: bool
    total_time: int
    retry_len: int
    total_len: int
    def __init__(self, optDir) -> None: ...
    def createdir(self) -> None: ...
    def asyncDownload(self, chapters: list[Chapter], max_task: int = ...): ...

def reConcat() -> None: ...
def merge(chapters: list[Chapter], dir: str, is_remove: bool = ...): ...
def time_fmt(time: float): ...
def redelete() -> None: ...
